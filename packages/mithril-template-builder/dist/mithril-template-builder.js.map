{"version":3,"file":"mithril-template-builder.js","sources":["../src/html-properties.js","../src/index.js"],"sourcesContent":["export const booleans = {\n  allowfullscreen: 1,\n  allowpaymentrequest: 1,\n  async: 1,\n  autofocus: 1,\n  autoplay: 1,\n  checked: 1,\n  controls: 1,\n  default: 1,\n  defer: 1,\n  disabled: 1,\n  formnovalidate: 1,\n  hidden: 1,\n  ismap: 1,\n  itemscope: 1,\n  loop: 1,\n  multiple: 1,\n  muted: 1,\n  nomodule: 1,\n  novalidate: 1,\n  open: 1,\n  readonly: 1,\n  required: 1,\n  reversed: 1,\n  selected: 1,\n  typemustmatch: 1,\n};\n\nexport const svgCaseSensitiveTagNames = {\n  altglyph: 'altGlyph',\n  altglyphdef: 'altGlyphDef',\n  altglyphitem: 'altGlyphItem',\n  animatecolor: 'animateColor',\n  animatemotion: 'animateMotion',\n  animatetransform: 'animateTransform',\n  clippath: 'clipPath',\n  feblend: 'feBlend',\n  fecolormatrix: 'feColorMatrix',\n  fecomponenttransfer: 'feComponentTransfer',\n  fecomposite: 'feComposite',\n  feconvolvematrix: 'feConvolveMatrix',\n  fediffuselighting: 'feDiffuseLighting',\n  fedisplacementmap: 'feDisplacementMap',\n  fedistantlight: 'feDistantLight',\n  feflood: 'feFlood',\n  fefunca: 'feFuncA',\n  fefuncb: 'feFuncB',\n  fefuncg: 'feFuncG',\n  fefuncr: 'feFuncR',\n  fegaussianblur: 'feGaussianBlur',\n  feimage: 'feImage',\n  femerge: 'feMerge',\n  femergenode: 'feMergeNode',\n  femorphology: 'feMorphology',\n  feoffset: 'feOffset',\n  fepointlight: 'fePointLight',\n  fespecularlighting: 'feSpecularLighting',\n  fespotlight: 'feSpotLight',\n  fetile: 'feTile',\n  feturbulence: 'feTurbulence',\n  foreignobject: 'foreignObject',\n  glyphref: 'glyphRef',\n  lineargradient: 'linearGradient',\n  radialgradient: 'radialGradient',\n  textpath: 'textPath',\n};\n","// @ts-check\n\n/**\n * @typedef {{tag: string, attrs: object, children: Array<Vnode>}} Vnode\n */\n\nimport { booleans, svgCaseSensitiveTagNames } from './html-properties';\n\n/**\n * @type {RegExp} ENTITY_REGEX\n */\nconst ENTITY_REGEX = /(&#?\\w+;)/;\n\nconst TAG_REGEX = /^[a-zA-Z][a-zA-Z0-9\\-\\:]*$/;\n\nexport const indentOptions = {\n  2: {\n    label: '2 spaces',\n    value: '  ',\n  },\n  4: {\n    label: '4 spaces',\n    value: '    ',\n  },\n  tab: {\n    label: 'Tabs',\n    value: '\\t',\n  },\n};\nconst defaultIndentOption = indentOptions['2'];\n\nexport const attrsOptions = {\n  attributes: {\n    label: 'Attributes',\n    value: 'attributes',\n  },\n  selectors: {\n    label: 'Selectors',\n    value: 'selectors',\n  },\n};\nconst defaultAttrsOption = attrsOptions['attributes'];\n\nexport const quotesOptions = {\n  double: {\n    label: 'Double',\n    value: '\"',\n  },\n  single: {\n    label: 'Single',\n    value: \"'\",\n  },\n};\nconst defaultQuotesOption = quotesOptions['double'];\n\nconst normaliseDoubleQuotes = (str, quoteChar) =>\n  str.replace(new RegExp('\"', 'g'), quoteChar);\n\n/**\n * @param {Array} list\n * @param {function} f\n */\nconst each = (list, f) => {\n  for (let i = 0; i < list.length; i++) {\n    f(list[i], i);\n  }\n};\n\n/**\n * @param {string} markup\n * @returns {Array<ChildNode>}\n */\nconst createFragment = markup => {\n  // escape HTML entities, to be resolved in addVirtualString\n  markup = markup.replace(/&/g, '&amp;');\n  if (markup.indexOf('<!doctype') >= 0) {\n    return [new DOMParser().parseFromString(markup, 'text/html').childNodes[1]];\n  }\n  const container = document.createElement('div');\n  container.insertAdjacentHTML('beforeend', markup);\n  return [...container.childNodes];\n};\n\n/**\n * @param {Array<Node>|Array<ChildNode>} fragment\n * @returns {Array<Vnode>}\n */\nconst createVirtual = fragment => {\n  const list = [];\n\n  each(fragment, function (el) {\n    if (el.nodeType === 3) {\n      list.push(el.nodeValue);\n    } else if (el.nodeType === 1) {\n      const attrs = {};\n      each(el.attributes, function ({ name, value }) {\n        const hasValidName = !!name.match(TAG_REGEX);\n        if (hasValidName) {\n          if (booleans[name]) {\n            attrs[name] = name;\n          } else {\n            attrs[name] = value;\n          }\n        }\n      });\n\n      const tag = el.nodeName.toLowerCase();\n      const hasValidTag = !!tag.match(TAG_REGEX);\n      if (hasValidTag) {\n        // restore proper tag in case of SVG\n        const caseTag = svgCaseSensitiveTagNames[tag] || tag;\n        list.push({\n          tag: caseTag,\n          attrs,\n          children: createVirtual(el.childNodes),\n        });\n      }\n    }\n  });\n  return list;\n};\n\n/**\n * @param {string} style\n * @returns {Array<Array<string>>}\n */\nconst styleToList = style => {\n  let styleAttrs = style.replace(/(^.*);\\s*$/, '$1'); // trim trailing semi-colon\n  styleAttrs = styleAttrs.replace(/[\\n\\r]/g, ''); // remove newlines\n  const list = styleAttrs.split(/\\s*;\\s*/); // [\"color:#f00\", \"border:1px solid red\"]\n  const styleList = list.map(propValue => propValue.split(/\\s*:\\s*/));\n  return styleList;\n};\n\n/**\n * @param {Array<Array<string>>} styleList\n * @returns {object}\n */\nconst styleListToObject = styleList => {\n  const obj = styleList.reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n  return obj;\n};\n\n/**\n *\n * @param {Array<Vnode>} virtual\n * @param {object} opts\n * @param {string} opts.attrs\n * @param {string} opts.quoteChar\n */\nfunction TemplateBuilder(virtual, { attrs, quoteChar }) {\n  this.virtual = virtual;\n  this.attrs = attrs;\n  this.quoteChar = quoteChar;\n  this.embeddedQuoteChar = quoteChar === '\"' ? \"'\" : '\"';\n  this.children = []; // each child is an object with attributes: node, children, content\n}\n\nTemplateBuilder.prototype = {\n  addVirtualString: function (el) {\n    const content = el.replace(/([\"\\r\\n])/g, '\\\\$1');\n    // handle HTML entities\n    const contentWithEntities = content.split(ENTITY_REGEX);\n    if (contentWithEntities.length > 1) {\n      contentWithEntities.forEach(part => {\n        if (part.match(ENTITY_REGEX)) {\n          this.children.push({\n            content: `m.trust(${this.quoteChar}${part}${this.quoteChar})`,\n          });\n        } else if (part) {\n          this.children.push({\n            content: `${this.quoteChar}${part}${this.quoteChar}`,\n          });\n        }\n      });\n    } else {\n      this.children.push({\n        content: `${this.quoteChar}${content}${this.quoteChar}`,\n      });\n    }\n  },\n\n  /**\n   * @param {object} vnode\n   */\n  addVirtualAttrs: function (vnode) {\n    const template = ({\n      tag,\n      className,\n      attrsAsSelectorString,\n      attrsAsObjectString,\n      style,\n    }) =>\n      `${this.quoteChar}${tag}${className}${attrsAsSelectorString}${this.quoteChar}${attrsAsObjectString}${style}`;\n    const defaultTag = 'div';\n\n    const data = {\n      tag: '',\n      className: '',\n      attrsAsSelectorString: '',\n      attrsAsObjectString: '',\n      style: '',\n    };\n\n    const { class: className = '', style = '', ...attrs } = vnode.attrs;\n\n    const validAttrs = Object.keys(attrs)\n      .filter(name => attrs[name] !== undefined)\n      .reduce((obj, key) => {\n        obj[key] = attrs[key];\n        return obj;\n      }, {});\n\n    if (this.attrs === attrsOptions['selectors'].value) {\n      // tag\n      data.tag =\n        vnode.tag === defaultTag\n          ? Object.keys(validAttrs).length === 0\n            ? 'div'\n            : ''\n          : vnode.tag;\n\n      // className\n      data.className = className ? `.${className.replace(/\\s+/g, '.')}` : '';\n\n      // attrs\n      data.attrsAsSelectorString = Object.keys(validAttrs)\n        .map(name => {\n          const value = validAttrs[name]\n            .replace(/[\\n\\r\\t]/g, ' ')\n            .replace(/\\s+/g, ' ') // clean up redundant spaces we just created\n            .replace(new RegExp(this.embeddedQuoteChar, 'g'), this.quoteChar); // escape quotes\n          return booleans[name] && name === value\n            ? `[${name}]`\n            : `[${name}=${this.embeddedQuoteChar}${value}${this.embeddedQuoteChar}]`;\n        })\n        .join('');\n\n      // style\n      if (style) {\n        const styleList = styleToList(style);\n        const styleAttrs = styleListToObject(styleList);\n        const styleAttrsString = normaliseDoubleQuotes(\n          JSON.stringify(styleAttrs),\n          this.quoteChar,\n        );\n        data.style = `, {${this.quoteChar}style${this.quoteChar}:${styleAttrsString}}`;\n      }\n    } else {\n      const styleAttrs = style ? styleListToObject(styleToList(style)) : {};\n      const withStyleAttrs = {\n        // className\n        ...(className.length > 0\n          ? { class: normaliseDoubleQuotes(className, this.quoteChar) }\n          : {}),\n        // attrs\n        ...validAttrs,\n        // style\n        ...(Object.keys(styleAttrs).length > 0 ? { style: styleAttrs } : {}),\n      };\n\n      // tag\n      data.tag = vnode.tag || defaultTag;\n\n      if (Object.keys(withStyleAttrs).length > 0) {\n        data.attrsAsObjectString = `, ${normaliseDoubleQuotes(\n          JSON.stringify(withStyleAttrs),\n          this.quoteChar,\n        )}`;\n      }\n    }\n\n    const children =\n      vnode.children.length !== 0\n        ? new TemplateBuilder(vnode.children, {\n            attrs: this.attrs,\n            quoteChar: this.quoteChar,\n          }).complete()\n        : null;\n\n    this.children.push({\n      node: template(data),\n      children,\n    });\n  },\n\n  complete: function () {\n    each(\n      this.virtual,\n      function (vnode) {\n        if (typeof vnode === 'string') {\n          // First test which characters are left when performing a trim\n          const trimmed = vnode.trim();\n          const charCode = vnode.charCodeAt(0);\n          // dimiss:\n          // - empty strings\n          // - single escaped quotes\n          // - single newlines\n          // - characters with char code lower than SPACE, but allow newlines in multiline text\n          if (\n            trimmed.length !== 0 &&\n            trimmed !== '\"' &&\n            !(trimmed.length === 1 && charCode === 10) &&\n            (charCode === 10 || charCode >= 32)\n          ) {\n            // We don't use the actual trimmed string because we need to preserve whitespace.\n            // But we do want to get rid of newlines and tabs.\n            const safeStr = vnode\n              .replace(/[\\n\\r\\t]/g, ' ')\n              .replace(/\\s+/g, ' '); // clean up redundant spaces we just created\n            this.addVirtualString(safeStr);\n          }\n        } else {\n          this.addVirtualAttrs(vnode);\n        }\n      }.bind(this),\n    );\n    return this.children;\n  },\n};\n\n/**\n * @param {number} level\n * @param {string} indent\n * @returns {string}\n */\nconst whitespace = (level, indent) => {\n  if (level < 0) return '';\n  let whitespace = '';\n  for (var i = 0; i < level; i++) {\n    whitespace += indent;\n  }\n  return whitespace;\n};\n\n/**\n * @param {string} content\n * @returns {string}\n */\nconst wrapperTemplate = content => `[${content}\\n]`;\n\n/**\n * @param {string} content\n * @param {string} whitespace\n * @returns {string}\n */\nconst contentTemplate = (content, whitespace) => `\\n${whitespace}${content}`;\n\n/**\n * @param {string} mithrilNode\n * @param {string} whitespace\n * @returns {string}\n */\nconst singleMithrilNodeTemplate = (mithrilNode, whitespace) =>\n  `\\n${whitespace}m(${mithrilNode})`;\n\n/**\n * @param {string} mithrilNode\n * @param {Array<string>} children\n * @param {string} whitespace\n * @param {string} indentChars\n * @returns {string}\n */\nconst mithrilNodeMultipleChildrenTemplate = (\n  mithrilNode,\n  children,\n  whitespace,\n  indentChars,\n) =>\n  `\\n${whitespace}m(${mithrilNode},\n${whitespace}${indentChars}[${children}\n${whitespace}${indentChars}]\n${whitespace})`;\n\n/**\n * @param {string} mithrilNode\n * @param {Array<string>} children\n * @param {string} whitespace\n * @returns {string}\n */\nconst mithrilNodeSingleChildTemplate = (mithrilNode, children, whitespace) =>\n  `\\n${whitespace}m(${mithrilNode}, ${children}\n${whitespace})`;\n\n/**\n * @param {string} mithrilNode\n * @param {Array<string>} children\n * @param {string} whitespace\n * @param {string} indentChars\n * @returns {string}\n */\nconst template = (mithrilNode, children, whitespace, indentChars) =>\n  children\n    ? children.length > 1\n      ? mithrilNodeMultipleChildrenTemplate(\n          mithrilNode,\n          children,\n          whitespace,\n          indentChars,\n        )\n      : mithrilNodeSingleChildTemplate(mithrilNode, children, whitespace)\n    : singleMithrilNodeTemplate(mithrilNode, whitespace);\n\n/**\n * @param {Array} data\n * @param {number} level\n * @param {string} indentChars\n * @returns {Array<string>}\n */\nconst formatCode = (data, level, indentChars) => {\n  if (!data) {\n    return;\n  }\n  return data.map(d => {\n    const space = whitespace(level, indentChars);\n    if (d.content) {\n      return contentTemplate(d.content, space);\n    }\n    const node = d.node || '';\n    const newLevel = level + (d.children && d.children.length > 1 ? 2 : 1);\n    const children = formatCode(d.children, newLevel, indentChars);\n    return template(node, children, space, indentChars);\n  });\n};\n\n/**\n * @param {object} opts\n * @param {string} opts.source - String containing HTML markup\n * @param {(\"2\" | \"4\" | \"tab\")} [opts.indent] - Indent; default \"2\"\n * @param {(\"double\" | \"single\")} [opts.quotes] - Quotes; default \"double\"\n * @param {(\"attributes\" | \"selectors\")} [opts.attrs] - Display attributes; default \"attributes\"\n * @returns {string}\n */\nexport const templateBuilder = opts => {\n  const fragment = createFragment(opts.source);\n  const source = createVirtual(fragment);\n  const attrs = attrsOptions[opts.attrs]\n    ? attrsOptions[opts.attrs].value\n    : defaultAttrsOption.value;\n  const quoteChar = quotesOptions[opts.quotes]\n    ? quotesOptions[opts.quotes].value\n    : defaultQuotesOption.value;\n  const parsed = new TemplateBuilder(source, { attrs, quoteChar }).complete();\n  const indentLevel = parsed.length > 1 ? 1 : 0;\n  const indentChars = indentOptions[opts.indent]\n    ? indentOptions[opts.indent].value\n    : defaultIndentOption.value;\n  const formatted = formatCode(parsed, indentLevel, indentChars);\n\n  // only wrap output in brackets when it is a list\n  const wrapped =\n    formatted.length > 1\n      ? wrapperTemplate(formatted.join(', '))\n      : formatted.join('').trim();\n  return wrapped;\n};\n"],"names":["booleans","allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","defer","disabled","formnovalidate","hidden","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","readonly","required","reversed","selected","typemustmatch","svgCaseSensitiveTagNames","altglyph","altglyphdef","altglyphitem","animatecolor","animatemotion","animatetransform","clippath","feblend","fecolormatrix","fecomponenttransfer","fecomposite","feconvolvematrix","fediffuselighting","fedisplacementmap","fedistantlight","feflood","fefunca","fefuncb","fefuncg","fefuncr","fegaussianblur","feimage","femerge","femergenode","femorphology","feoffset","fepointlight","fespecularlighting","fespotlight","fetile","feturbulence","foreignobject","glyphref","lineargradient","radialgradient","textpath","ENTITY_REGEX","TAG_REGEX","indentOptions","label","value","tab","defaultIndentOption","attrsOptions","attributes","selectors","defaultAttrsOption","quotesOptions","single","defaultQuotesOption","normaliseDoubleQuotes","str","quoteChar","replace","RegExp","each","list","f","i","length","createVirtual","fragment","el","nodeType","push","nodeValue","attrs","name","match","tag","nodeName","toLowerCase","caseTag","children","childNodes","styleToList","style","styleAttrs","split","map","propValue","styleListToObject","styleList","reduce","acc","key","TemplateBuilder","virtual","embeddedQuoteChar","prototype","addVirtualString","content","contentWithEntities","forEach","part","_this","this","addVirtualAttrs","vnode","data","className","attrsAsSelectorString","attrsAsObjectString","validAttrs","Object","keys","filter","undefined","obj","_this2","join","styleAttrsString","JSON","stringify","withStyleAttrs","complete","node","template","trimmed","trim","charCode","charCodeAt","safeStr","bind","formatCode","level","indentChars","d","space","indent","whitespace","contentTemplate","newLevel","mithrilNode","mithrilNodeMultipleChildrenTemplate","mithrilNodeSingleChildTemplate","singleMithrilNodeTemplate","opts","markup","indexOf","DOMParser","parseFromString","container","document","createElement","insertAdjacentHTML","createFragment","source","parsed","quotes","indentLevel","formatted"],"mappings":"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"}