{"version":3,"file":"mithril-template-builder.js","sources":["../src/html-properties.js","../src/index.js"],"sourcesContent":["\nexport const booleans = {\n  allowfullscreen: 1,\n  allowpaymentrequest: 1,\n  async: 1,\n  autofocus: 1,\n  autoplay: 1,\n  checked: 1,\n  controls: 1,\n  default: 1,\n  defer: 1,\n  disabled: 1,\n  formnovalidate: 1,\n  hidden: 1,\n  ismap: 1,\n  itemscope: 1,\n  loop: 1,\n  multiple: 1,\n  muted: 1,\n  nomodule: 1,\n  novalidate: 1,\n  open: 1,\n  readonly: 1,\n  required: 1,\n  reversed: 1,\n  selected: 1,\n  typemustmatch: 1\n};\n\nexport const svgCaseSensitiveTagNames = {\n  \"altglyph\": \"altGlyph\",\n  \"altglyphdef\": \"altGlyphDef\",\n  \"altglyphitem\": \"altGlyphItem\",\n  \"animatecolor\": \"animateColor\",\n  \"animatemotion\": \"animateMotion\",\n  \"animatetransform\": \"animateTransform\",\n  \"clippath\": \"clipPath\",\n  \"feblend\": \"feBlend\",\n  \"fecolormatrix\": \"feColorMatrix\",\n  \"fecomponenttransfer\": \"feComponentTransfer\",\n  \"fecomposite\": \"feComposite\",\n  \"feconvolvematrix\": \"feConvolveMatrix\",\n  \"fediffuselighting\": \"feDiffuseLighting\",\n  \"fedisplacementmap\": \"feDisplacementMap\",\n  \"fedistantlight\": \"feDistantLight\",\n  \"feflood\": \"feFlood\",\n  \"fefunca\": \"feFuncA\",\n  \"fefuncb\": \"feFuncB\",\n  \"fefuncg\": \"feFuncG\",\n  \"fefuncr\": \"feFuncR\",\n  \"fegaussianblur\": \"feGaussianBlur\",\n  \"feimage\": \"feImage\",\n  \"femerge\": \"feMerge\",\n  \"femergenode\": \"feMergeNode\",\n  \"femorphology\": \"feMorphology\",\n  \"feoffset\": \"feOffset\",\n  \"fepointlight\": \"fePointLight\",\n  \"fespecularlighting\": \"feSpecularLighting\",\n  \"fespotlight\": \"feSpotLight\",\n  \"fetile\": \"feTile\",\n  \"feturbulence\": \"feTurbulence\",\n  \"foreignobject\": \"foreignObject\",\n  \"glyphref\": \"glyphRef\",\n  \"lineargradient\": \"linearGradient\",\n  \"radialgradient\": \"radialGradient\",\n  \"textpath\": \"textPath\",\n};","// @ts-check\n\n/**\n * @typedef {{tag: string, attrs: object, children: Array<Vnode>}} Vnode\n */\n\nimport { booleans, svgCaseSensitiveTagNames } from \"./html-properties\";\n\n/**\n * @type {RegExp} ENTITY_REGEX\n */\nconst ENTITY_REGEX = /(&#?\\w+;)/;\n\nconst TAG_REGEX = /^[a-zA-Z][a-zA-Z0-9\\-\\:]*$/;\n\nexport const indentOptions = {\n  \"2\": {\n    label: \"2 spaces\",\n    value: \"  \",\n  },\n  \"4\": {\n    label: \"4 spaces\",\n    value: \"    \",\n  },\n  \"tab\": {\n    label: \"Tabs\",\n    value: \"\\t\"\n  }\n};\nconst defaultIndentOption = indentOptions[\"2\"];\n\nexport const attrsOptions = {\n  \"attributes\": {\n    label: \"Attributes\",\n    value: \"attributes\",\n  },\n  \"selectors\" : {\n    label: \"Selectors\",\n    value: \"selectors\",\n  }\n};\nconst defaultAttrsOption = attrsOptions[\"attributes\"];\n\nexport const quotesOptions = {\n  \"double\": {\n    label: \"Double\",\n    value: \"\\\"\"\n  },\n  \"single\": {\n    label: \"Single\",\n    value: \"'\"\n  }\n};\nconst defaultQuotesOption = quotesOptions[\"double\"];\n\nconst normaliseDoubleQuotes = (str, quoteChar) =>\n  str.replace(new RegExp(\"\\\"\", \"g\"), quoteChar);\n  \n/**\n * @param {Array} list \n * @param {function} f \n */\nconst each = (list, f) => {\n  for (let i = 0; i < list.length; i++) {\n    f(list[i], i);\n  }\n};\n\n/**\n * @param {string} markup \n * @returns {Array<ChildNode>}\n */\nconst createFragment = markup => {\n  // escape HTML entities, to be resolved in addVirtualString\n  markup = markup.replace(/&/g, \"&amp;\");\n  if (markup.indexOf(\"<!doctype\") >= 0) {\n    return [\n      new DOMParser()\n        .parseFromString(markup, \"text/html\")\n        .childNodes[1]\n    ];\n  }\n  const container = document.createElement(\"div\");\n  container.insertAdjacentHTML(\"beforeend\", markup);\n  return [...container.childNodes];\n};\n\n/**\n * @param {Array<Node>|Array<ChildNode>} fragment \n * @returns {Array<Vnode>}\n */\nconst createVirtual = fragment => {\n  const list = [];\n\n  each(fragment, function(el) {\n\n    if (el.nodeType === 3) {\n      list.push(el.nodeValue);\n    } else if (el.nodeType === 1) {\n      const attrs = {};\n      each(el.attributes, function({ name, value }) {\n        const hasValidName = !!name.match(TAG_REGEX);\n        if (hasValidName) {\n          if (booleans[name]) {\n            attrs[name] = name;\n          } else {\n            attrs[name] = value;\n          }\n        }\n      });\n\n      const tag = el.nodeName.toLowerCase();\n      const hasValidTag = !!tag.match(TAG_REGEX);\n      if (hasValidTag) {\n        // restore proper tag in case of SVG\n        const caseTag = svgCaseSensitiveTagNames[tag] || tag;\n        list.push({\n          tag: caseTag,\n          attrs,\n          children: createVirtual(el.childNodes)\n        });\n      }\n    }\n  });\n  return list;\n};\n\n/**\n * @param {string} style \n * @returns {Array<Array<string>>}\n */\nconst styleToList = style => {\n  let styleAttrs = style.replace(/(^.*);\\s*$/, \"$1\"); // trim trailing semi-colon\n  styleAttrs = styleAttrs.replace(/[\\n\\r]/g, \"\");     // remove newlines\n  const list = styleAttrs.split(/\\s*;\\s*/);           // [\"color:#f00\", \"border:1px solid red\"]\n  const styleList = list.map(propValue =>\n    propValue.split(/\\s*:\\s*/)\n  );\n  return styleList;\n};\n\n/**\n * @param {Array<Array<string>>} styleList \n * @returns {object}\n */\nconst styleListToObject = styleList => {\n  const obj = styleList.reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n  return obj;\n};\n\n/**\n * \n * @param {Array<Vnode>} virtual \n * @param {object} opts\n * @param {string} opts.attrs\n * @param {string} opts.quoteChar\n */\nfunction TemplateBuilder(virtual, { attrs, quoteChar }) {\n  this.virtual = virtual;\n  this.attrs = attrs;\n  this.quoteChar = quoteChar;\n  this.embeddedQuoteChar = quoteChar === \"\\\"\"\n    ? \"'\"\n    : \"\\\"\";\n  this.children = []; // each child is an object with attributes: node, children, content\n}\n\nTemplateBuilder.prototype = {\n  addVirtualString: function(el) {\n    const content = el.replace(/([\"\\r\\n])/g, \"\\\\$1\");\n    // handle HTML entities\n    const contentWithEntities = content.split(ENTITY_REGEX);\n    if (contentWithEntities.length > 1) {\n      contentWithEntities.forEach((part) => {\n        if (part.match(ENTITY_REGEX)) {\n          this.children.push({\n            content: `m.trust(${this.quoteChar}${part}${this.quoteChar})`\n          });\n        } else if (part) {\n          this.children.push({\n            content: `${this.quoteChar}${part}${this.quoteChar}`\n          });\n        }\n      });\n    } else {\n      this.children.push({\n        content: `${this.quoteChar}${content}${this.quoteChar}`\n      });\n    }\n  },\n\n  /**\n   * @param {object} vnode \n   */\n  addVirtualAttrs: function(vnode) {\n\n    const template = ({ tag, className, attrsAsSelectorString, attrsAsObjectString, style }) => `${this.quoteChar}${tag}${className}${attrsAsSelectorString}${this.quoteChar}${attrsAsObjectString}${style}`;\n    const defaultTag = \"div\";\n\n    const data = {\n      tag: \"\",\n      className: \"\",\n      attrsAsSelectorString: \"\",\n      attrsAsObjectString: \"\",\n      style: \"\"\n    };\n\n    const { class: className = \"\", style = \"\", ...attrs } = vnode.attrs;\n    \n    const validAttrs = Object.keys(attrs)\n      .filter(name => attrs[name] !== undefined)\n      .reduce((obj, key) => {\n        obj[key] = attrs[key];\n        return obj;\n      }, {});\n\n    if (this.attrs === attrsOptions[\"selectors\"].value) {\n      \n      // tag\n      data.tag = vnode.tag === defaultTag\n        ? Object.keys(validAttrs).length === 0\n          ? \"div\"\n          : \"\"\n        : vnode.tag;\n      \n      // className\n      data.className = className\n        ? `.${className.replace(/\\s+/g, \".\")}`\n        : \"\";\n\n      // attrs\n      data.attrsAsSelectorString = Object.keys(validAttrs)\n        .map(name => {\n          const value = validAttrs[name]\n            .replace(/[\\n\\r\\t]/g, \" \")\n            .replace(/\\s+/g, \" \") // clean up redundant spaces we just created\n            .replace(new RegExp(this.embeddedQuoteChar, \"g\"), this.quoteChar); // escape quotes\n          return booleans[name] && name === value\n            ? `[${name}]`\n            : `[${name}=${this.embeddedQuoteChar}${value}${this.embeddedQuoteChar}]`;\n        })\n        .join(\"\");\n\n      // style\n      if (style) {\n        const styleList = styleToList(style);\n        const styleAttrs = styleListToObject(styleList);\n        const styleAttrsString = normaliseDoubleQuotes(\n          JSON.stringify(styleAttrs),\n          this.quoteChar\n        );\n        data.style = `, {${this.quoteChar}style${this.quoteChar}:${styleAttrsString}}`;\n      }\n\n    } else { \n      const styleAttrs = style\n        ? styleListToObject(styleToList(style))\n        : {};\n      const withStyleAttrs = {\n        // className\n        ...(className.length > 0\n          ? { class: normaliseDoubleQuotes(\n            className,\n            this.quoteChar\n          )}\n          : {}\n        ),\n        // attrs\n        ...validAttrs,\n        // style\n        ...(Object.keys(styleAttrs).length > 0\n          ? { style: styleAttrs}\n          : {}\n        )\n      };\n\n      // tag\n      data.tag = vnode.tag || defaultTag;\n\n      if (Object.keys(withStyleAttrs).length > 0) {\n        data.attrsAsObjectString = `, ${normaliseDoubleQuotes(\n          JSON.stringify(withStyleAttrs),\n          this.quoteChar\n        )}`;\n      }\n    }\n\n    const children = (vnode.children.length !== 0)\n      ? new TemplateBuilder(vnode.children, { attrs: this.attrs, quoteChar: this.quoteChar }).complete()\n      : null;\n\n    this.children.push({\n      node: template(data),\n      children\n    });\n  },\n\n  complete: function() {\n    each(this.virtual, function(vnode) {\n\n      if (typeof vnode === \"string\") {\n        // First test which characters are left when performing a trim\n        const trimmed = vnode.trim();\n        const charCode = vnode.charCodeAt(0);\n        // dimiss:\n        // - empty strings\n        // - single escaped quotes\n        // - single newlines\n        // - characters with char code lower than SPACE, but allow newlines in multiline text\n        if (\n          trimmed.length !== 0\n          && trimmed !== \"\\\"\"\n          && !(trimmed.length === 1 && charCode === 10)\n          && (charCode === 10 || charCode >= 32)\n        ) {\n          // We don't use the actual trimmed string because we need to preserve whitespace.\n          // But we do want to get rid of newlines and tabs.\n          const safeStr = vnode\n            .replace(/[\\n\\r\\t]/g, \" \")\n            .replace(/\\s+/g, \" \") // clean up redundant spaces we just created\n          this.addVirtualString(safeStr);\n        }\n      } else {\n        this.addVirtualAttrs(vnode);\n      }\n    }.bind(this));\n    return this.children;\n  }\n};\n\n/**\n * @param {number} level \n * @param {string} indent \n * @returns {string}\n */\nconst whitespace = (level, indent) => {\n  if (level < 0) return \"\";\n  let whitespace = \"\";\n  for (var i = 0; i < level; i++) {\n    whitespace += indent;\n  }\n  return whitespace;\n};\n\n/**\n * @param {string} content \n * @returns {string}\n */\nconst wrapperTemplate = content => (\n  `[${content}\\n]`\n);\n\n/**\n * @param {string} content \n * @param {string} whitespace \n * @returns {string}\n */\nconst contentTemplate = (content, whitespace) => (\n  `\\n${whitespace}${content}`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {string} whitespace \n * @returns {string}\n */\nconst singleMithrilNodeTemplate = (mithrilNode, whitespace) => (\n  `\\n${whitespace}m(${mithrilNode})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @param {string} indentChars\n * @returns {string}\n */\nconst mithrilNodeMultipleChildrenTemplate = (mithrilNode, children, whitespace, indentChars) => (\n  `\\n${whitespace}m(${mithrilNode},\n${whitespace}${indentChars}[${children}\n${whitespace}${indentChars}]\n${whitespace})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @returns {string}\n */\nconst mithrilNodeSingleChildTemplate = (mithrilNode, children, whitespace) => (\n  `\\n${whitespace}m(${mithrilNode}, ${children}\n${whitespace})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @param {string} indentChars\n * @returns {string}\n */\nconst template = (mithrilNode, children, whitespace, indentChars) => (\n  children\n    ? children.length > 1\n      ? mithrilNodeMultipleChildrenTemplate(mithrilNode, children, whitespace, indentChars)\n      : mithrilNodeSingleChildTemplate(mithrilNode, children, whitespace)\n    : singleMithrilNodeTemplate(mithrilNode, whitespace)\n);\n\n/**\n * @param {Array} data \n * @param {number} level \n * @param {string} indentChars\n * @returns {Array<string>}\n */\nconst formatCode = (data, level, indentChars) => {\n  if (!data) {\n    return;\n  }\n  return data.map((d) => {\n    const space = whitespace(level, indentChars);\n    if (d.content) {\n      return contentTemplate(d.content, space);\n    }\n    const node = d.node || \"\";\n    const newLevel = level + (d.children && d.children.length > 1 ? 2 : 1);\n    const children = formatCode(d.children, newLevel, indentChars);\n    return template(node, children, space, indentChars);\n  });\n};\n\n/**\n * @param {object} opts \n * @param {string} opts.source - String containing HTML markup\n * @param {(\"2\" | \"4\" | \"tab\")} [opts.indent] - Indent; default \"2\"\n * @param {(\"double\" | \"single\")} [opts.quotes] - Quotes; default \"double\"\n * @param {(\"attributes\" | \"selectors\")} [opts.attrs] - Display attributes; default \"attributes\"\n * @returns {string}\n */\nexport const templateBuilder = opts => {\n  const fragment = createFragment(opts.source);\n  const source = createVirtual(fragment);\n  const attrs = attrsOptions[opts.attrs]\n  ? attrsOptions[opts.attrs].value\n  : defaultAttrsOption.value;\n  const quoteChar = quotesOptions[opts.quotes]\n    ? quotesOptions[opts.quotes].value\n    : defaultQuotesOption.value;\n  const parsed = new TemplateBuilder(source, { attrs, quoteChar }).complete();\n  const indentLevel = parsed.length > 1\n    ? 1\n    : 0;\n  const indentChars = indentOptions[opts.indent]\n    ? indentOptions[opts.indent].value\n    : defaultIndentOption.value;\n  const formatted = formatCode(parsed, indentLevel, indentChars);\n\n  // only wrap output in brackets when it is a list\n  const wrapped = formatted.length > 1 ?\n    wrapperTemplate(formatted.join(\", \")) :\n    formatted.join(\"\").trim();\n  return wrapped;\n};\n"],"names":["booleans","allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","defer","disabled","formnovalidate","hidden","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","readonly","required","reversed","selected","typemustmatch","svgCaseSensitiveTagNames","ENTITY_REGEX","TAG_REGEX","indentOptions","label","value","defaultIndentOption","attrsOptions","defaultAttrsOption","quotesOptions","defaultQuotesOption","normaliseDoubleQuotes","str","quoteChar","replace","RegExp","each","list","f","i","length","createVirtual","fragment","el","nodeType","push","nodeValue","attrs","attributes","name","match","tag","nodeName","toLowerCase","caseTag","children","childNodes","styleToList","style","styleAttrs","split","map","propValue","styleListToObject","styleList","reduce","acc","key","TemplateBuilder","virtual","embeddedQuoteChar","prototype","addVirtualString","content","contentWithEntities","forEach","part","_this","this","addVirtualAttrs","vnode","data","className","attrsAsSelectorString","attrsAsObjectString","validAttrs","Object","keys","filter","undefined","obj","_this2","join","styleAttrsString","JSON","stringify","withStyleAttrs","complete","node","template","trimmed","trim","charCode","charCodeAt","safeStr","bind","formatCode","level","indentChars","d","space","indent","whitespace","contentTemplate","newLevel","mithrilNode","mithrilNodeMultipleChildrenTemplate","mithrilNodeSingleChildTemplate","singleMithrilNodeTemplate","opts","markup","indexOf","DOMParser","parseFromString","container","document","createElement","insertAdjacentHTML","createFragment","source","parsed","quotes","indentLevel","formatted"],"mappings":"wlFACO,IAAMA,EAAW,CACtBC,gBAAiB,EACjBC,oBAAqB,EACrBC,MAAO,EACPC,UAAW,EACXC,SAAU,EACVC,QAAS,EACTC,SAAU,UACD,EACTC,MAAO,EACPC,SAAU,EACVC,eAAgB,EAChBC,OAAQ,EACRC,MAAO,EACPC,UAAW,EACXC,KAAM,EACNC,SAAU,EACVC,MAAO,EACPC,SAAU,EACVC,WAAY,EACZC,KAAM,EACNC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,SAAU,EACVC,cAAe,GAGJC,EAA2B,UAC1B,uBACG,2BACC,4BACA,6BACC,iCACG,4BACR,mBACD,wBACM,oCACM,kCACR,+BACK,qCACC,sCACA,mCACH,yBACP,kBACA,kBACA,kBACA,kBACA,yBACO,yBACP,kBACA,sBACI,2BACC,wBACJ,wBACI,kCACM,iCACP,qBACL,sBACM,6BACC,yBACL,0BACM,gCACA,0BACN,YCtDRC,EAAe,YAEfC,EAAY,6BAELC,EAAgB,GACtB,CACHC,MAAO,WACPC,MAAO,QAEJ,CACHD,MAAO,WACPC,MAAO,YAEF,CACLD,MAAO,OACPC,MAAO,OAGLC,EAAsBH,EAAc,GAE7BI,EAAe,YACZ,CACZH,MAAO,aACPC,MAAO,wBAEK,CACZD,MAAO,YACPC,MAAO,cAGLG,EAAqBD,EAAY,WAE1BE,EAAgB,QACjB,CACRL,MAAO,SACPC,MAAO,YAEC,CACRD,MAAO,SACPC,MAAO,MAGLK,EAAsBD,EAAa,OAEnCE,EAAwB,SAACC,EAAKC,UAClCD,EAAIE,QAAQ,IAAIC,OAAO,IAAM,KAAMF,IAM/BG,EAAO,SAACC,EAAMC,OACb,IAAIC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BD,EAAED,EAAKE,GAAIA,IA2BTE,EAAgB,SAAhBA,EAAgBC,OACdL,EAAO,UAEbD,EAAKM,GAAU,SAASC,MAEF,IAAhBA,EAAGC,SACLP,EAAKQ,KAAKF,EAAGG,gBACR,GAAoB,IAAhBH,EAAGC,SAAgB,KACtBG,EAAQ,GACdX,EAAKO,EAAGK,YAAY,gBAAWC,IAAAA,KAAMxB,IAAAA,QACZwB,EAAKC,MAAM5B,KAG9ByB,EAAME,GADJtD,EAASsD,GACGA,EAEAxB,UAKd0B,EAAMR,EAAGS,SAASC,mBACFF,EAAID,MAAM5B,GACf,KAETgC,EAAUlC,EAAyB+B,IAAQA,EACjDd,EAAKQ,KAAK,CACRM,IAAKG,EACLP,MAAAA,EACAQ,SAAUd,EAAcE,EAAGa,mBAK5BnB,GAOHoB,EAAc,SAAAC,OACdC,EAAaD,EAAMxB,QAAQ,aAAc,aAC7CyB,EAAaA,EAAWzB,QAAQ,UAAW,KACnB0B,MAAM,WACPC,KAAI,SAAAC,UACzBA,EAAUF,MAAM,eASdG,EAAoB,SAAAC,UACZA,EAAUC,QAAO,SAACC,kBAAMC,OAAK1C,cACvCyC,EAAIC,GAAO1C,EACJyC,IACN,KAWL,SAASE,EAAgBC,SAAWtB,IAAAA,MAAOd,IAAAA,eACpCoC,QAAUA,OACVtB,MAAQA,OACRd,UAAYA,OACZqC,kBAAkC,MAAdrC,EACrB,IACA,SACCsB,SAAW,GAGlBa,EAAgBG,UAAY,CAC1BC,iBAAkB,SAAS7B,cACnB8B,EAAU9B,EAAGT,QAAQ,aAAc,QAEnCwC,EAAsBD,EAAQb,MAAMvC,GACtCqD,EAAoBlC,OAAS,EAC/BkC,EAAoBC,SAAQ,SAACC,GACvBA,EAAK1B,MAAM7B,GACbwD,EAAKtB,SAASV,KAAK,CACjB4B,0BAAoBI,EAAK5C,kBAAY2C,UAAOC,EAAK5C,iBAE1C2C,GACTC,EAAKtB,SAASV,KAAK,CACjB4B,kBAAYI,EAAK5C,kBAAY2C,UAAOC,EAAK5C,qBAK1CsB,SAASV,KAAK,CACjB4B,kBAAYK,KAAK7C,kBAAYwC,UAAUK,KAAK7C,cAQlD8C,gBAAiB,SAASC,cAKlBC,EAAO,CACX9B,IAAK,GACL+B,UAAW,GACXC,sBAAuB,GACvBC,oBAAqB,GACrB1B,MAAO,MAG+CsB,EAAMjC,gBAA/CmC,aAAY,SAAIxB,MAAAA,aAAQ,KAAOX,yBAExCsC,EAAaC,OAAOC,KAAKxC,GAC5ByC,QAAO,SAAAvC,eAAwBwC,IAAhB1C,EAAME,MACrBgB,QAAO,SAACyB,EAAKvB,UACZuB,EAAIvB,GAAOpB,EAAMoB,GACVuB,IACN,OAEDZ,KAAK/B,QAAUpB,EAAY,UAAcF,UAG3CwD,EAAK9B,IAtBY,QAsBN6B,EAAM7B,IACsB,IAAnCmC,OAAOC,KAAKF,GAAY7C,OACtB,MACA,GACFwC,EAAM7B,IAGV8B,EAAKC,UAAYA,aACTA,EAAUhD,QAAQ,OAAQ,MAC9B,GAGJ+C,EAAKE,sBAAwBG,OAAOC,KAAKF,GACtCxB,KAAI,SAAAZ,OACGxB,EAAQ4D,EAAWpC,GACtBf,QAAQ,YAAa,KACrBA,QAAQ,OAAQ,KAChBA,QAAQ,IAAIC,OAAOwD,EAAKrB,kBAAmB,KAAMqB,EAAK1D,kBAClDtC,EAASsD,IAASA,IAASxB,aAC1BwB,kBACAA,cAAQ0C,EAAKrB,0BAAoB7C,UAAQkE,EAAKrB,0BAEvDsB,KAAK,IAGJlC,EAAO,KACHM,EAAYP,EAAYC,GACxBC,EAAaI,EAAkBC,GAC/B6B,EAAmB9D,EACvB+D,KAAKC,UAAUpC,GACfmB,KAAK7C,WAEPgD,EAAKvB,mBAAcoB,KAAK7C,0BAAiB6C,KAAK7C,sBAAa4D,YAGxD,KACClC,EAAaD,EACfK,EAAkBN,EAAYC,IAC9B,GACEsC,WAEAd,EAAU1C,OAAS,EACnB,OAAST,EACTmD,EACAJ,KAAK7C,YAEL,IAGDoD,GAECC,OAAOC,KAAK5B,GAAYnB,OAAS,EACjC,CAAEkB,MAAOC,GACT,IAKNsB,EAAK9B,IAAM6B,EAAM7B,KAhFA,MAkFbmC,OAAOC,KAAKS,GAAgBxD,OAAS,IACvCyC,EAAKG,gCAA2BrD,EAC9B+D,KAAKC,UAAUC,GACflB,KAAK7C,iBAKLsB,EAAsC,IAA1ByB,EAAMzB,SAASf,OAC7B,IAAI4B,EAAgBY,EAAMzB,SAAU,CAAER,MAAO+B,KAAK/B,MAAOd,UAAW6C,KAAK7C,YAAagE,WACtF,UAEC1C,SAASV,KAAK,CACjBqD,KAhGe,gBAAG/C,IAAAA,IAAK+B,IAAAA,UAAWC,IAAAA,sBAAuBC,IAAAA,oBAAqB1B,IAAAA,sBAAeiC,EAAK1D,kBAAYkB,UAAM+B,UAAYC,UAAwBQ,EAAK1D,kBAAYmD,UAAsB1B,GAgGzLyC,CAASlB,GACf1B,SAAAA,KAIJ0C,SAAU,kBACR7D,EAAK0C,KAAKT,QAAS,SAASW,MAEL,iBAAVA,EAAoB,KAEvBoB,EAAUpB,EAAMqB,OAChBC,EAAWtB,EAAMuB,WAAW,MAOb,IAAnBH,EAAQ5D,QACO,MAAZ4D,IACqB,IAAnBA,EAAQ5D,QAA6B,KAAb8D,KACZ,KAAbA,GAAmBA,GAAY,IACnC,KAGME,EAAUxB,EACb9C,QAAQ,YAAa,KACrBA,QAAQ,OAAQ,UACdsC,iBAAiBgC,cAGnBzB,gBAAgBC,IAEvByB,KAAK3B,OACAA,KAAKvB,WAShB,IAiFMmD,EAAa,SAAbA,EAAczB,EAAM0B,EAAOC,MAC1B3B,SAGEA,EAAKpB,KAAI,SAACgD,OACTC,EAtFS,SAACH,EAAOI,MACrBJ,EAAQ,EAAG,MAAO,WAClBK,EAAa,GACRzE,EAAI,EAAGA,EAAIoE,EAAOpE,IACzByE,GAAcD,SAETC,EAgFSA,CAAWL,EAAOC,MAC5BC,EAAEpC,eAjEc,SAACA,EAASuC,qBAC3BA,UAAavC,GAiEPwC,CAAgBJ,EAAEpC,QAASqC,OAE9BZ,EAAOW,EAAEX,MAAQ,GACjBgB,EAAWP,GAASE,EAAEtD,UAAYsD,EAAEtD,SAASf,OAAS,EAAI,EAAI,UAxBvD,SAAC2E,EAAa5D,EAAUyD,EAAYJ,UACnDrD,EACIA,EAASf,OAAS,EA3BoB,SAAC2E,EAAa5D,EAAUyD,EAAYJ,qBACzEI,eAAeG,gBACpBH,UAAaJ,cAAerD,eAC5ByD,UAAaJ,gBACbI,OAwBMI,CAAoCD,EAAa5D,EAAUyD,EAAYJ,GAfxC,SAACO,EAAa5D,EAAUyD,qBACxDA,eAAeG,eAAgB5D,eACpCyD,OAcMK,CAA+BF,EAAa5D,EAAUyD,GAxC5B,SAACG,EAAaH,qBACzCA,eAAeG,OAwChBG,CAA0BH,EAAaH,GAqBlCb,CAASD,EADCQ,EAAWG,EAAEtD,SAAU2D,EAAUN,GAClBE,EAAOF,8EAYZ,SAAAW,OA5FP9C,EA6FhB/B,EApXe,SAAA8E,OAErBA,EAASA,EAAOtF,QAAQ,KAAM,UACnBuF,QAAQ,cAAgB,QAC1B,EACL,IAAIC,WACDC,gBAAgBH,EAAQ,aACxBhE,WAAW,QAGZoE,EAAYC,SAASC,cAAc,cACzCF,EAAUG,mBAAmB,YAAaP,KAC/BI,EAAUpE,YAwWJwE,CAAeT,EAAKU,QAQ/BC,EAAS,IAAI9D,EAPJ3B,EAAcC,GAOc,CAAEK,MAN/BpB,EAAa4F,EAAKxE,OAC9BpB,EAAa4F,EAAKxE,OAAOtB,MACzBG,EAAmBH,MAI+BQ,UAHlCJ,EAAc0F,EAAKY,QACjCtG,EAAc0F,EAAKY,QAAQ1G,MAC3BK,EAAoBL,QACyCwE,WAC3DmC,EAAcF,EAAO1F,OAAS,EAChC,EACA,EACEoE,EAAcrF,EAAcgG,EAAKR,QACnCxF,EAAcgG,EAAKR,QAAQtF,MAC3BC,EAAoBD,MAClB4G,EAAY3B,EAAWwB,EAAQE,EAAaxB,UAGlCyB,EAAU7F,OAAS,GA/GbiC,EAgHJ4D,EAAUzC,KAAK,iBA/G7BnB,UAgHF4D,EAAUzC,KAAK,IAAIS"}