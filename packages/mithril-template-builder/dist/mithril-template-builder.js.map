{"version":3,"file":"mithril-template-builder.js","sources":["../src/html-properties.js","../src/index.js"],"sourcesContent":["\nexport const booleans = {\n  allowfullscreen: 1,\n  allowpaymentrequest: 1,\n  async: 1,\n  autofocus: 1,\n  autoplay: 1,\n  checked: 1,\n  controls: 1,\n  default: 1,\n  defer: 1,\n  disabled: 1,\n  formnovalidate: 1,\n  hidden: 1,\n  ismap: 1,\n  itemscope: 1,\n  loop: 1,\n  multiple: 1,\n  muted: 1,\n  nomodule: 1,\n  novalidate: 1,\n  open: 1,\n  readonly: 1,\n  required: 1,\n  reversed: 1,\n  selected: 1,\n  typemustmatch: 1\n};\n\nexport const svgCaseSensitiveTagNames = {\n  \"altglyph\": \"altGlyph\",\n  \"altglyphdef\": \"altGlyphDef\",\n  \"altglyphitem\": \"altGlyphItem\",\n  \"animatecolor\": \"animateColor\",\n  \"animatemotion\": \"animateMotion\",\n  \"animatetransform\": \"animateTransform\",\n  \"clippath\": \"clipPath\",\n  \"feblend\": \"feBlend\",\n  \"fecolormatrix\": \"feColorMatrix\",\n  \"fecomponenttransfer\": \"feComponentTransfer\",\n  \"fecomposite\": \"feComposite\",\n  \"feconvolvematrix\": \"feConvolveMatrix\",\n  \"fediffuselighting\": \"feDiffuseLighting\",\n  \"fedisplacementmap\": \"feDisplacementMap\",\n  \"fedistantlight\": \"feDistantLight\",\n  \"feflood\": \"feFlood\",\n  \"fefunca\": \"feFuncA\",\n  \"fefuncb\": \"feFuncB\",\n  \"fefuncg\": \"feFuncG\",\n  \"fefuncr\": \"feFuncR\",\n  \"fegaussianblur\": \"feGaussianBlur\",\n  \"feimage\": \"feImage\",\n  \"femerge\": \"feMerge\",\n  \"femergenode\": \"feMergeNode\",\n  \"femorphology\": \"feMorphology\",\n  \"feoffset\": \"feOffset\",\n  \"fepointlight\": \"fePointLight\",\n  \"fespecularlighting\": \"feSpecularLighting\",\n  \"fespotlight\": \"feSpotLight\",\n  \"fetile\": \"feTile\",\n  \"feturbulence\": \"feTurbulence\",\n  \"foreignobject\": \"foreignObject\",\n  \"glyphref\": \"glyphRef\",\n  \"lineargradient\": \"linearGradient\",\n  \"radialgradient\": \"radialGradient\",\n  \"textpath\": \"textPath\",\n};","// @ts-check\n\n/**\n * @typedef {{tag: string, attrs: object, children: Array<Vnode>}} Vnode\n */\n\nimport { booleans, svgCaseSensitiveTagNames } from \"./html-properties\";\n\n/**\n * @type {RegExp} ENTITY_REGEX\n */\nconst ENTITY_REGEX = /(&#?\\w+;)/;\n\nconst TAG_REGEX = /^[a-zA-Z][a-zA-Z0-9\\-\\:]*$/;\n\nexport const indentOptions = {\n  \"2\": {\n    label: \"2 spaces\",\n    value: \"  \",\n  },\n  \"4\": {\n    label: \"4 spaces\",\n    value: \"    \",\n  },\n  \"tab\": {\n    label: \"Tabs\",\n    value: \"\\t\"\n  }\n};\nconst defaultIndentOption = indentOptions[\"2\"];\n\nexport const attrsOptions = {\n  \"attributes\": {\n    label: \"Attributes\",\n    value: \"attributes\",\n  },\n  \"selectors\" : {\n    label: \"Selectors\",\n    value: \"selectors\",\n  }\n};\nconst defaultAttrsOption = attrsOptions[\"attributes\"];\n\nexport const quotesOptions = {\n  \"double\": {\n    label: \"Double\",\n    value: \"\\\"\"\n  },\n  \"single\": {\n    label: \"Single\",\n    value: \"'\"\n  }\n};\nconst defaultQuotesOption = quotesOptions[\"double\"];\n\nconst normaliseDoubleQuotes = (str, quoteChar) =>\n  str.replace(new RegExp(\"\\\"\", \"g\"), quoteChar);\n  \n/**\n * @param {Array} list \n * @param {function} f \n */\nconst each = (list, f) => {\n  for (let i = 0; i < list.length; i++) {\n    f(list[i], i);\n  }\n};\n\n/**\n * @param {string} markup \n * @returns {Array<ChildNode>}\n */\nconst createFragment = markup => {\n  // escape HTML entities, to be resolved in addVirtualString\n  markup = markup.replace(/&/g, \"&amp;\");\n  if (markup.indexOf(\"<!doctype\") >= 0) {\n    return [\n      new DOMParser()\n        .parseFromString(markup, \"text/html\")\n        .childNodes[1]\n    ];\n  }\n  const container = document.createElement(\"div\");\n  container.insertAdjacentHTML(\"beforeend\", markup);\n  return [...container.childNodes];\n};\n\n/**\n * @param {Array<Node>|Array<ChildNode>} fragment \n * @returns {Array<Vnode>}\n */\nconst createVirtual = fragment => {\n  const list = [];\n\n  each(fragment, function(el) {\n\n    if (el.nodeType === 3) {\n      list.push(el.nodeValue);\n    } else if (el.nodeType === 1) {\n      const attrs = {};\n      each(el.attributes, function({ name, value }) {\n        const hasValidName = !!name.match(TAG_REGEX);\n        if (hasValidName) {\n          if (booleans[name]) {\n            attrs[name] = name;\n          } else {\n            attrs[name] = value;\n          }\n        }\n      });\n\n      const tag = el.nodeName.toLowerCase();\n      const hasValidTag = !!tag.match(TAG_REGEX);\n      if (hasValidTag) {\n        // restore proper tag in case of SVG\n        const caseTag = svgCaseSensitiveTagNames[tag] || tag;\n        list.push({\n          tag: caseTag,\n          attrs,\n          children: createVirtual(el.childNodes)\n        });\n      }\n    }\n  });\n  return list;\n};\n\n/**\n * @param {string} style \n * @returns {Array<Array<string>>}\n */\nconst styleToList = style => {\n  let styleAttrs = style.replace(/(^.*);\\s*$/, \"$1\"); // trim trailing semi-colon\n  styleAttrs = styleAttrs.replace(/[\\n\\r]/g, \"\");     // remove newlines\n  const list = styleAttrs.split(/\\s*;\\s*/);           // [\"color:#f00\", \"border:1px solid red\"]\n  const styleList = list.map(propValue =>\n    propValue.split(/\\s*:\\s*/)\n  );\n  return styleList;\n};\n\n/**\n * @param {Array<Array<string>>} styleList \n * @returns {object}\n */\nconst styleListToObject = styleList => {\n  const obj = styleList.reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n  return obj;\n};\n\n/**\n * \n * @param {Array<Vnode>} virtual \n * @param {object} opts\n * @param {string} opts.attrs\n * @param {string} opts.quoteChar\n */\nfunction TemplateBuilder(virtual, { attrs, quoteChar }) {\n  this.virtual = virtual;\n  this.attrs = attrs;\n  this.quoteChar = quoteChar;\n  this.embeddedQuoteChar = quoteChar === \"\\\"\"\n    ? \"'\"\n    : \"\\\"\";\n  this.children = []; // each child is an object with attributes: node, children, content\n}\n\nTemplateBuilder.prototype = {\n  addVirtualString: function(el) {\n    const content = el.replace(/([\"\\r\\n])/g, \"\\\\$1\");\n    // handle HTML entities\n    const contentWithEntities = content.split(ENTITY_REGEX);\n    if (contentWithEntities.length > 1) {\n      contentWithEntities.forEach((part) => {\n        if (part.match(ENTITY_REGEX)) {\n          this.children.push({\n            content: `m.trust(${this.quoteChar}${part}${this.quoteChar})`\n          });\n        } else if (part) {\n          this.children.push({\n            content: `${this.quoteChar}${part}${this.quoteChar}`\n          });\n        }\n      });\n    } else {\n      this.children.push({\n        content: `${this.quoteChar}${content}${this.quoteChar}`\n      });\n    }\n  },\n\n  /**\n   * @param {object} vnode \n   */\n  addVirtualAttrs: function(vnode) {\n\n    const template = ({ tag, className, attrsAsSelectorString, attrsAsObjectString, style }) => `${this.quoteChar}${tag}${className}${attrsAsSelectorString}${this.quoteChar}${attrsAsObjectString}${style}`;\n    const defaultTag = \"div\";\n\n    const data = {\n      tag: \"\",\n      className: \"\",\n      attrsAsSelectorString: \"\",\n      attrsAsObjectString: \"\",\n      style: \"\"\n    };\n\n    const { class: className = \"\", style = \"\", ...attrs } = vnode.attrs;\n    \n    const validAttrs = Object.keys(attrs)\n      .filter(name => attrs[name] !== undefined)\n      .reduce((obj, key) => {\n        obj[key] = attrs[key];\n        return obj;\n      }, {});\n\n    if (this.attrs === attrsOptions[\"selectors\"].value) {\n      \n      // tag\n      data.tag = vnode.tag === defaultTag\n        ? Object.keys(validAttrs).length === 0\n          ? \"div\"\n          : \"\"\n        : vnode.tag;\n      \n      // className\n      data.className = className\n        ? `.${className.replace(/\\s+/g, \".\")}`\n        : \"\";\n\n      // attrs\n      data.attrsAsSelectorString = Object.keys(validAttrs)\n        .map(name => {\n          const value = validAttrs[name]\n            .replace(/[\\n\\r\\t]/g, \" \")\n            .replace(/\\s+/g, \" \") // clean up redundant spaces we just created\n            .replace(new RegExp(this.embeddedQuoteChar, \"g\"), this.quoteChar); // escape quotes\n          return booleans[name] && name === value\n            ? `[${name}]`\n            : `[${name}=${this.embeddedQuoteChar}${value}${this.embeddedQuoteChar}]`;\n        })\n        .join(\"\");\n\n      // style\n      if (style) {\n        const styleList = styleToList(style);\n        const styleAttrs = styleListToObject(styleList);\n        const styleAttrsString = normaliseDoubleQuotes(\n          JSON.stringify(styleAttrs),\n          this.quoteChar\n        );\n        data.style = `, {${this.quoteChar}style${this.quoteChar}:${styleAttrsString}}`;\n      }\n\n    } else { \n      const styleAttrs = style\n        ? styleListToObject(styleToList(style))\n        : {};\n      const withStyleAttrs = {\n        // className\n        ...(className.length > 0\n          ? { class: normaliseDoubleQuotes(\n            className,\n            this.quoteChar\n          )}\n          : {}\n        ),\n        // attrs\n        ...validAttrs,\n        // style\n        ...(Object.keys(styleAttrs).length > 0\n          ? { style: styleAttrs}\n          : {}\n        )\n      };\n\n      // tag\n      data.tag = vnode.tag || defaultTag;\n\n      if (Object.keys(withStyleAttrs).length > 0) {\n        data.attrsAsObjectString = `, ${normaliseDoubleQuotes(\n          JSON.stringify(withStyleAttrs),\n          this.quoteChar\n        )}`;\n      }\n    }\n\n    const children = (vnode.children.length !== 0)\n      ? new TemplateBuilder(vnode.children, { attrs: this.attrs, quoteChar: this.quoteChar }).complete()\n      : null;\n\n    this.children.push({\n      node: template(data),\n      children\n    });\n  },\n\n  complete: function() {\n    each(this.virtual, function(vnode) {\n\n      if (typeof vnode === \"string\") {\n        // First test which characters are left when performing a trim\n        const trimmed = vnode.trim();\n        const charCode = vnode.charCodeAt(0);\n        // dimiss:\n        // - empty strings\n        // - single escaped quotes\n        // - single newlines\n        // - characters with char code lower than SPACE, but allow newlines in multiline text\n        if (\n          trimmed.length !== 0\n          && trimmed !== \"\\\"\"\n          && !(trimmed.length === 1 && charCode === 10)\n          && (charCode === 10 || charCode >= 32)\n        ) {\n          // We don't use the actual trimmed string because we need to preserve whitespace.\n          // But we do want to get rid of newlines and tabs.\n          const safeStr = vnode\n            .replace(/[\\n\\r\\t]/g, \" \")\n            .replace(/\\s+/g, \" \") // clean up redundant spaces we just created\n          this.addVirtualString(safeStr);\n        }\n      } else {\n        this.addVirtualAttrs(vnode);\n      }\n    }.bind(this));\n    return this.children;\n  }\n};\n\n/**\n * @param {number} level \n * @param {string} indent \n * @returns {string}\n */\nconst whitespace = (level, indent) => {\n  if (level < 0) return \"\";\n  let whitespace = \"\";\n  for (var i = 0; i < level; i++) {\n    whitespace += indent;\n  }\n  return whitespace;\n};\n\n/**\n * @param {string} content \n * @returns {string}\n */\nconst wrapperTemplate = content => (\n  `[${content}\\n]`\n);\n\n/**\n * @param {string} content \n * @param {string} whitespace \n * @returns {string}\n */\nconst contentTemplate = (content, whitespace) => (\n  `\\n${whitespace}${content}`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {string} whitespace \n * @returns {string}\n */\nconst singleMithrilNodeTemplate = (mithrilNode, whitespace) => (\n  `\\n${whitespace}m(${mithrilNode})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @param {string} indentChars\n * @returns {string}\n */\nconst mithrilNodeMultipleChildrenTemplate = (mithrilNode, children, whitespace, indentChars) => (\n  `\\n${whitespace}m(${mithrilNode},\n${whitespace}${indentChars}[${children}\n${whitespace}${indentChars}]\n${whitespace})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @returns {string}\n */\nconst mithrilNodeSingleChildTemplate = (mithrilNode, children, whitespace) => (\n  `\\n${whitespace}m(${mithrilNode}, ${children}\n${whitespace})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @param {string} indentChars\n * @returns {string}\n */\nconst template = (mithrilNode, children, whitespace, indentChars) => (\n  children\n    ? children.length > 1\n      ? mithrilNodeMultipleChildrenTemplate(mithrilNode, children, whitespace, indentChars)\n      : mithrilNodeSingleChildTemplate(mithrilNode, children, whitespace)\n    : singleMithrilNodeTemplate(mithrilNode, whitespace)\n);\n\n/**\n * @param {Array} data \n * @param {number} level \n * @param {string} indentChars\n * @returns {Array<string>}\n */\nconst formatCode = (data, level, indentChars) => {\n  if (!data) {\n    return;\n  }\n  return data.map((d) => {\n    const space = whitespace(level, indentChars);\n    if (d.content) {\n      return contentTemplate(d.content, space);\n    }\n    const node = d.node || \"\";\n    const newLevel = level + (d.children && d.children.length > 1 ? 2 : 1);\n    const children = formatCode(d.children, newLevel, indentChars);\n    return template(node, children, space, indentChars);\n  });\n};\n\n/**\n * @param {object} opts \n * @param {string} opts.source - String containing HTML markup\n * @param {(\"2\" | \"4\" | \"tab\")} [opts.indent] - Indent; default \"2\"\n * @param {(\"double\" | \"single\")} [opts.quotes] - Quotes; default \"double\"\n * @param {(\"attributes\" | \"selectors\")} [opts.attrs] - Display attributes; default \"attributes\"\n * @returns {string}\n */\nexport const templateBuilder = opts => {\n  const fragment = createFragment(opts.source);\n  const source = createVirtual(fragment);\n  const attrs = attrsOptions[opts.attrs]\n  ? attrsOptions[opts.attrs].value\n  : defaultAttrsOption.value;\n  const quoteChar = quotesOptions[opts.quotes]\n    ? quotesOptions[opts.quotes].value\n    : defaultQuotesOption.value;\n  const parsed = new TemplateBuilder(source, { attrs, quoteChar }).complete();\n  const indentLevel = parsed.length > 1\n    ? 1\n    : 0;\n  const indentChars = indentOptions[opts.indent]\n    ? indentOptions[opts.indent].value\n    : defaultIndentOption.value;\n  const formatted = formatCode(parsed, indentLevel, indentChars);\n\n  // only wrap output in brackets when it is a list\n  const wrapped = formatted.length > 1 ?\n    wrapperTemplate(formatted.join(\", \")) :\n    formatted.join(\"\").trim();\n  return wrapped;\n};\n"],"names":["booleans","allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","defer","disabled","formnovalidate","hidden","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","readonly","required","reversed","selected","typemustmatch","svgCaseSensitiveTagNames","ENTITY_REGEX","TAG_REGEX","indentOptions","label","value","defaultIndentOption","attrsOptions","defaultAttrsOption","quotesOptions","defaultQuotesOption","normaliseDoubleQuotes","str","quoteChar","replace","RegExp","each","list","f","i","length","styleToList","style","styleAttrs","split","map","propValue","styleListToObject","styleList","reduce","acc","key","TemplateBuilder","virtual","attrs","embeddedQuoteChar","children","prototype","addVirtualString","el","content","contentWithEntities","forEach","part","match","_this","push","this","addVirtualAttrs","vnode","data","tag","className","attrsAsSelectorString","attrsAsObjectString","validAttrs","Object","keys","filter","name","undefined","obj","_this2","join","styleAttrsString","JSON","stringify","withStyleAttrs","complete","node","template","trimmed","trim","charCode","charCodeAt","safeStr","bind","opts","parsed","createVirtual","fragment","nodeType","nodeValue","attributes","nodeName","toLowerCase","caseTag","childNodes","markup","indexOf","DOMParser","parseFromString","container","document","createElement","insertAdjacentHTML","createFragment","source","quotes","formatted","formatCode","level","indentChars","d","space","indent","whitespace","contentTemplate","newLevel","mithrilNode","mithrilNodeMultipleChildrenTemplate","mithrilNodeSingleChildTemplate","singleMithrilNodeTemplate"],"mappings":"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"}