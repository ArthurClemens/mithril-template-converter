{"version":3,"file":"mithril-template-builder.js","sources":["../src/html-properties.js","../src/index.js"],"sourcesContent":["\nexport const booleans = {\n  allowfullscreen: 1,\n  allowpaymentrequest: 1,\n  async: 1,\n  autofocus: 1,\n  autoplay: 1,\n  checked: 1,\n  controls: 1,\n  default: 1,\n  defer: 1,\n  disabled: 1,\n  formnovalidate: 1,\n  hidden: 1,\n  ismap: 1,\n  itemscope: 1,\n  loop: 1,\n  multiple: 1,\n  muted: 1,\n  nomodule: 1,\n  novalidate: 1,\n  open: 1,\n  readonly: 1,\n  required: 1,\n  reversed: 1,\n  selected: 1,\n  typemustmatch: 1\n};\n\nexport const svgCaseSensitiveTagNames = {\n  \"altglyph\": \"altGlyph\",\n  \"altglyphdef\": \"altGlyphDef\",\n  \"altglyphitem\": \"altGlyphItem\",\n  \"animatecolor\": \"animateColor\",\n  \"animatemotion\": \"animateMotion\",\n  \"animatetransform\": \"animateTransform\",\n  \"clippath\": \"clipPath\",\n  \"feblend\": \"feBlend\",\n  \"fecolormatrix\": \"feColorMatrix\",\n  \"fecomponenttransfer\": \"feComponentTransfer\",\n  \"fecomposite\": \"feComposite\",\n  \"feconvolvematrix\": \"feConvolveMatrix\",\n  \"fediffuselighting\": \"feDiffuseLighting\",\n  \"fedisplacementmap\": \"feDisplacementMap\",\n  \"fedistantlight\": \"feDistantLight\",\n  \"feflood\": \"feFlood\",\n  \"fefunca\": \"feFuncA\",\n  \"fefuncb\": \"feFuncB\",\n  \"fefuncg\": \"feFuncG\",\n  \"fefuncr\": \"feFuncR\",\n  \"fegaussianblur\": \"feGaussianBlur\",\n  \"feimage\": \"feImage\",\n  \"femerge\": \"feMerge\",\n  \"femergenode\": \"feMergeNode\",\n  \"femorphology\": \"feMorphology\",\n  \"feoffset\": \"feOffset\",\n  \"fepointlight\": \"fePointLight\",\n  \"fespecularlighting\": \"feSpecularLighting\",\n  \"fespotlight\": \"feSpotLight\",\n  \"fetile\": \"feTile\",\n  \"feturbulence\": \"feTurbulence\",\n  \"foreignobject\": \"foreignObject\",\n  \"glyphref\": \"glyphRef\",\n  \"lineargradient\": \"linearGradient\",\n  \"radialgradient\": \"radialGradient\",\n  \"textpath\": \"textPath\",\n};","// @ts-check\n\n/**\n * @typedef {{tag: string, attrs: object, children: Array<Vnode>}} Vnode\n */\n\nimport { booleans, svgCaseSensitiveTagNames } from \"./html-properties\";\n\n/**\n * @type {RegExp} ENTITY_REGEX\n */\nconst ENTITY_REGEX = /(&#?\\w+;)/;\nconst DEFAULT_INDENT = \"2\";\n\n/**\n * @param {Array} list \n * @param {function} f \n */\nconst each = (list, f) => {\n  for (let i = 0; i < list.length; i++) {\n    f(list[i], i);\n  }\n};\n\n/**\n * @param {string} markup \n * @returns {Array<ChildNode>}\n */\nconst createFragment = markup => {\n  // escape HTML entities, to be resolved in addVirtualString\n  markup = markup.replace(/&/g, \"&amp;\");\n  if (markup.indexOf(\"<!doctype\") >= 0) {\n    return [\n      new DOMParser()\n        .parseFromString(markup, \"text/html\")\n        .childNodes[1]\n    ];\n  }\n  const container = document.createElement(\"div\");\n  container.insertAdjacentHTML(\"beforeend\", markup);\n  return [...container.childNodes];\n};\n\n/**\n * @param {Array<Node>|Array<ChildNode>} fragment \n * @returns {Array<Vnode>}\n */\nconst createVirtual = fragment => {\n  const list = [];\n\n  each(fragment, function(el) {\n\n    if (el.nodeType === 3) {\n      list.push(el.nodeValue);\n    } else if (el.nodeType === 1) {\n      const attrs = {};\n      each(el.attributes, function({ name, value }) {\n        if (booleans[name]) {\n          attrs[name] = name;\n        } else {\n          attrs[name] = value;\n        }\n      });\n\n      const tag = el.nodeName.toLowerCase();\n      // restore proper tag in case of SVG\n      const caseTag = svgCaseSensitiveTagNames[tag] || tag;\n      \n      list.push({\n        tag: caseTag,\n        attrs,\n        children: createVirtual(el.childNodes)\n      });\n    }\n  });\n  return list;\n};\n\n/**\n * @param {string} style \n * @returns {Array<Array<string>>}\n */\nconst styleToList = style => {\n  let styleAttrs = style.replace(/(^.*);\\s*$/, \"$1\"); // trim trailing semi-colon\n  styleAttrs = styleAttrs.replace(/[\\n\\r]/g, \"\");     // remove newlines\n  const list = styleAttrs.split(/\\s*;\\s*/);           // [\"color:#f00\", \"border:1px solid red\"]\n  const styleList = list.map(propValue =>\n    propValue.split(/\\s*:\\s*/)\n  );\n  return styleList;\n};\n\n/**\n * @param {Array<Array<string>>} styleList \n * @returns {object}\n */\nconst styleListToObject = styleList => {\n  const obj = styleList.reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n  return obj;\n};\n\n/**\n * \n * @param {Array<Vnode>} virtual \n * @param {object} opts\n * @param {boolean} [opts.attrsAsObject]\n */\nfunction TemplateBuilder(virtual, { attrsAsObject } = {}) {\n  this.virtual = virtual;\n  this.attrsAsObject = attrsAsObject;\n  this.children = []; // each child is an object with attributes: node, children, content\n}\n\nTemplateBuilder.prototype = {\n  addVirtualString: function(el) {\n    const content = el.replace(/([\"\\r\\n])/g, \"\\\\$1\");\n    // handle HTML entities\n    const contentWithEntities = content.split(ENTITY_REGEX);\n    if (contentWithEntities.length > 1) {\n      contentWithEntities.forEach((part) => {\n        if (part.match(ENTITY_REGEX)) {\n          this.children.push({\n            content: `m.trust(\"${part}\")`\n          });\n        } else if (part) {\n          this.children.push({\n            content: `\"${part}\"`\n          });\n        }\n      });\n    } else {\n      this.children.push({\n        content: `\"${content}\"`\n      });\n    }\n  },\n\n  /**\n   * @param {object} vnode \n   */\n  addVirtualAttrs: function(vnode) {\n\n    const template = ({ tag, className, attrsAsSelectorString, attrsAsObjectString, style }) => `\"${tag}${className}${attrsAsSelectorString}\"${attrsAsObjectString}${style}`;\n    const defaultTag = \"div\";\n\n    const data = {\n      tag: \"\",\n      className: \"\",\n      attrsAsSelectorString: \"\",\n      attrsAsObjectString: \"\",\n      style: \"\"\n    };\n\n    const { class: className = \"\", style = \"\", ...attrs } = vnode.attrs;\n    \n    const validAttrs = Object.keys(attrs)\n      .filter(name => attrs[name] !== undefined)\n      .reduce((obj, key) => {\n        obj[key] = attrs[key];\n        return obj;\n      }, {});\n\n    if (!this.attrsAsObject) {\n      \n      // tag\n      data.tag = vnode.tag === defaultTag\n        ? Object.keys(validAttrs).length === 0\n          ? \"div\"\n          : \"\"\n        : vnode.tag;\n      \n      // className\n      data.className = className\n        ? `.${className.replace(/\\s+/g, \".\")}`\n        : \"\";\n\n      // attrs\n      data.attrsAsSelectorString = Object.keys(validAttrs)\n        .map(name => {\n          const value = validAttrs[name]\n            .replace(/[\\n\\r\\t]/g, \" \")\n            .replace(/\\s+/g, \" \")       // clean up redundant spaces we just created\n            .replace(/'/g, \"\\\\'\");      // escape quotes\n          return booleans[name] && name === value\n            ? `[${name}]`\n            : `[${name}='${value}']`;\n        })\n        .join(\"\");\n\n      // style\n      if (style) {\n        const styleList = styleToList(style);\n        const styleAttrs = styleListToObject(styleList);\n        const styleAttrsString = JSON.stringify(styleAttrs);\n        data.style = `, {\"style\":${styleAttrsString}}`;\n      }\n\n    } else { \n      const styleAttrs = style\n        ? styleListToObject(styleToList(style))\n        : {};\n      const withStyleAttrs = {\n        // className\n        ...(className.length > 0\n          ? { class: className }\n          : {}\n        ),\n        // attrs\n        ...validAttrs,\n        // style\n        ...(Object.keys(styleAttrs).length > 0\n          ? { style: styleAttrs}\n          : {}\n        )\n      };\n\n      // tag\n      data.tag = vnode.tag || defaultTag;\n\n      if (Object.keys(withStyleAttrs).length > 0) {\n        data.attrsAsObjectString = `, ${JSON.stringify(withStyleAttrs)}`;\n      }\n    }\n\n    const children = (vnode.children.length !== 0)\n      ? new TemplateBuilder(vnode.children, { attrsAsObject: this.attrsAsObject }).complete()\n      : null;\n\n    this.children.push({\n      node: template(data),\n      children\n    });\n  },\n\n  complete: function() {\n    each(this.virtual, function(vnode) {\n\n      if (typeof vnode === \"string\") {\n        const trimmed = vnode.trim();\n        const charCode = trimmed.charCodeAt(0);\n        // dimiss:\n        // - empty strings\n        // - single escaped quotes\n        // - single newlines\n        // - characters with char code lower than SPACE, but allow newlines in multiline text\n        if (\n          trimmed.length !== 0\n          && trimmed !== \"\\\"\"\n          && !(trimmed.length === 1 && charCode === 10)\n          && (charCode === 10 || charCode >= 32)\n        ) {\n          this.addVirtualString(trimmed);\n        }\n      } else {\n        this.addVirtualAttrs(vnode);\n      }\n    }.bind(this));\n    return this.children;\n  }\n};\n\n/**\n * @param {number} level \n * @param {string} indent \n * @returns {string}\n */\nconst whitespace = (level, indent) => {\n  if (level < 0) return \"\";\n  let whitespace = \"\";\n  for (var i = 0; i < level; i++) {\n    whitespace += indent;\n  }\n  return whitespace;\n};\n\n/**\n * @param {string} content \n * @returns {string}\n */\nconst wrapperTemplate = content => (\n  `[${content}\\n]`\n);\n\n/**\n * @param {string} content \n * @param {string} whitespace \n * @returns {string}\n */\nconst contentTemplate = (content, whitespace) => (\n  `\\n${whitespace}${content}`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {string} whitespace \n * @returns {string}\n */\nconst singleMithrilNodeTemplate = (mithrilNode, whitespace) => (\n  `\\n${whitespace}m(${mithrilNode})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @param {string} indentChars\n * @returns {string}\n */\nconst mithrilNodeMultipleChildrenTemplate = (mithrilNode, children, whitespace, indentChars) => (\n  `\\n${whitespace}m(${mithrilNode},\n${whitespace}${indentChars}[${children}\n${whitespace}${indentChars}]\n${whitespace})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @returns {string}\n */\nconst mithrilNodeSingleChildTemplate = (mithrilNode, children, whitespace) => (\n  `\\n${whitespace}m(${mithrilNode}, ${children}\n${whitespace})`\n);\n\n/**\n * @param {string} mithrilNode \n * @param {Array<string>} children \n * @param {string} whitespace \n * @param {string} indentChars\n * @returns {string}\n */\nconst template = (mithrilNode, children, whitespace, indentChars) => (\n  children\n    ? children.length > 1\n      ? mithrilNodeMultipleChildrenTemplate(mithrilNode, children, whitespace, indentChars)\n      : mithrilNodeSingleChildTemplate(mithrilNode, children, whitespace)\n    : singleMithrilNodeTemplate(mithrilNode, whitespace)\n);\n\n/**\n * @param {Array} data \n * @param {number} level \n * @param {string} indentChars\n * @returns {Array<string>}\n */\nconst formatCode = (data, level, indentChars) => {\n  if (!data) {\n    return;\n  }\n  return data.map((d) => {\n    const space = whitespace(level, indentChars);\n    if (d.content) {\n      return contentTemplate(d.content, space);\n    }\n    const node = d.node || \"\";\n    const newLevel = level + (d.children && d.children.length > 1 ? 2 : 1);\n    const children = formatCode(d.children, newLevel, indentChars);\n    return template(node, children, space, indentChars);\n  });\n};\n\nconst indentCharsMap = {\n  \"2\": \"  \",\n  \"4\": \"    \",\n  \"tab\": \"\\t\"\n};\n\n/**\n * @param {object} opts \n * @param {string} opts.source - String containing HTML markup\n * @param {(\"2\" | \"4\" | \"tab\")} [opts.indent]\n * @param {boolean} [opts.attrsAsObject]\n * @returns {string}\n */\nconst templateBuilder = opts => {\n  const fragment = createFragment(opts.source);\n  const source = createVirtual(fragment);\n  const parsed = new TemplateBuilder(source, { attrsAsObject: opts.attrsAsObject }).complete();\n  const indentLevel = parsed.length > 1 ?\n    1 :\n    0;\n  const indentChars = indentCharsMap[opts.indent || DEFAULT_INDENT];\n  const formatted = formatCode(parsed, indentLevel, indentChars);\n\n  // only wrap output in brackets when it is a list\n  const wrapped = formatted.length > 1 ?\n    wrapperTemplate(formatted.join(\", \")) :\n    formatted.join(\"\").trim();\n  return wrapped;\n};\n\nexport default templateBuilder;\n"],"names":["booleans","allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","readonly","required","reversed","selected","typemustmatch","svgCaseSensitiveTagNames","ENTITY_REGEX","each","list","f","i","length","styleToList","style","styleAttrs","replace","split","map","propValue","styleListToObject","styleList","reduce","acc","key","value","TemplateBuilder","virtual","attrsAsObject","children","prototype","addVirtualString","el","content","contentWithEntities","forEach","part","match","_this","push","addVirtualAttrs","vnode","data","tag","className","attrsAsSelectorString","attrsAsObjectString","attrs","class","validAttrs","Object","keys","filter","name","undefined","obj","this","withStyleAttrs","JSON","stringify","join","styleAttrsString","complete","node","template","trimmed","trim","charCode","charCodeAt","bind","indentCharsMap","opts","parsed","createVirtual","fragment","nodeType","nodeValue","attributes","nodeName","toLowerCase","caseTag","childNodes","markup","indexOf","DOMParser","parseFromString","container","document","createElement","insertAdjacentHTML","createFragment","source","formatted","formatCode","level","indentChars","d","space","indent","whitespace","contentTemplate","newLevel","mithrilNode","mithrilNodeMultipleChildrenTemplate","mithrilNodeSingleChildTemplate","singleMithrilNodeTemplate"],"mappings":"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"}